Metadata-Version: 2.4
Name: storage-space-api
Version: 0.1.0
Summary: FastAPI backend for P2P Storage Space Marketplace
License: MIT
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: psycopg2-binary>=2.9.7
Requires-Dist: alembic>=1.12.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: python-jose[cryptography]>=3.3.0
Requires-Dist: passlib[bcrypt]>=1.7.4
Requires-Dist: python-multipart>=0.0.6
Requires-Dist: email-validator>=2.0.0
Requires-Dist: prometheus-client>=0.17.0
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: dev
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: httpx>=0.24.1; extra == "dev"

# P2P Storage Space Marketplace

A peer-to-peer marketplace for renting out personal storage spaces with location-based search and booking functionality.

## Project Overview

This project consists of:
1. A React.js frontend built with Vite
2. A Python FastAPI backend
3. PostgreSQL database for data persistence
4. Comprehensive DevOps setup with Docker, Kubernetes, CI/CD, and monitoring

The application allows users to list their unused storage spaces and for others to rent these spaces. It includes features like search filtering, booking management, reviews, and messaging.

## Tech Stack

### Frontend
- React with TypeScript
- Vite for bundling
- Tailwind CSS & Shadcn UI for styling
- React Query for data fetching
- Wouter for routing

### Backend
- Python 3.11
- FastAPI framework
- SQLAlchemy ORM
- Pydantic for data validation
- JWT authentication
- Prometheus for metrics

### Database
- PostgreSQL

### DevOps
- Docker & Docker Compose for containerization
- Kubernetes for container orchestration
- GitHub Actions for CI/CD pipeline
- Prometheus & Grafana for monitoring
- Alembic for database migrations

## Project Structure

```
.
├── app/                            # Python FastAPI backend
│   ├── api/                        # API routes
│   │   └── routes/                 # API endpoints
│   ├── core/                       # Core configuration
│   ├── crud/                       # Database CRUD operations
│   ├── db/                         # Database setup
│   ├── models/                     # SQLAlchemy models
│   ├── schemas/                    # Pydantic schemas
│   └── main.py                     # FastAPI application entry point
├── client/                         # React frontend
│   ├── src/
│   │   ├── components/             # React components
│   │   ├── hooks/                  # Custom React hooks
│   │   ├── lib/                    # Utility functions
│   │   ├── pages/                  # Page components
│   │   ├── App.tsx                 # Main App component
│   │   └── main.tsx                # Frontend entry point
│   └── index.html                  # HTML template
├── migrations/                     # Alembic migrations
├── k8s/                            # Kubernetes configurations
├── .github/workflows/              # GitHub Actions workflows
├── docker-compose.yml              # Docker Compose configuration
├── Dockerfile                      # Docker image configuration
├── pyproject.toml                  # Python project configuration
├── prometheus.yml                  # Prometheus configuration
└── alembic.ini                     # Alembic configuration
```

## Project Setup and Local Development

### Prerequisites
- Python 3.11+
- Node.js 18+
- Docker and Docker Compose
- PostgreSQL (or use the dockerized version)

### Local Development Setup

1. **Clone the repository**

```bash
git clone <repository-url>
cd storage-space-marketplace
```

2. **Set up the backend**

```bash
# Create and activate a virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -e .
```

3. **Set up the database**

```bash
# Using the Docker Compose PostgreSQL instance
docker-compose up -d db

# Apply database migrations
alembic upgrade head
```

4. **Set up the frontend**

```bash
cd client
npm install
```

5. **Run the application**

```bash
# Backend
cd <project-root>
uvicorn app.main:app --reload --host 0.0.0.0 --port 5000

# Frontend
cd client
npm run dev
```

Alternatively, you can use Docker Compose to run everything:

```bash
docker-compose up -d
```

## Deployment Guide

### Option 1: Docker Deployment

This is the simplest deployment method for a single server.

1. **Prepare your server**

   Install Docker and Docker Compose on your server:

   ```bash
   # Update package lists
   sudo apt update

   # Install required packages
   sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

   # Add Docker's official GPG key
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

   # Add the Docker repository
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

   # Update and install Docker
   sudo apt update
   sudo apt install -y docker-ce docker-ce-cli containerd.io

   # Install Docker Compose
   sudo curl -L "https://github.com/docker/compose/releases/download/v2.10.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   sudo chmod +x /usr/local/bin/docker-compose

   # Add your user to the docker group to avoid using sudo
   sudo usermod -aG docker ${USER}
   ```

2. **Configure environment variables**

   Create a `.env` file in your project root with the following variables:

   ```
   DATABASE_URL=postgresql://postgres:postgres@db:5432/storage_space
   SECRET_KEY=your_secure_secret_key_here
   ```

   Generate a secure secret key:

   ```bash
   openssl rand -hex 32
   ```

3. **Configure your domain**

   Update the Nginx configuration in Docker Compose if you're using a custom domain.

4. **Deploy the application**

   ```bash
   # Clone your repository
   git clone <repository-url>
   cd storage-space-marketplace

   # Start the application
   docker-compose up -d
   ```

5. **Set up SSL with Certbot**

   If you want to enable HTTPS (recommended for production):

   ```bash
   # Install Certbot
   sudo apt install -y certbot python3-certbot-nginx

   # Set up SSL certificate
   sudo certbot --nginx -d yourdomain.com
   ```

### Option 2: Kubernetes Deployment

For larger-scale deployments with high availability:

1. **Set up a Kubernetes cluster**

   You can use a managed Kubernetes service like GKE, EKS, or AKS, or set up your own cluster with tools like kubeadm.

2. **Install kubectl and configure access to your cluster**

   Download kubectl and set up your kubeconfig file.

3. **Set up secrets**

   ```bash
   # Create a secret for the database URL
   kubectl create secret generic storage-space-secrets \
     --from-literal=database-url=postgresql://user:password@postgres-host:5432/storage_space \
     --from-literal=secret-key=your_secure_secret_key
   ```

4. **Deploy the application**

   ```bash
   # Apply the Kubernetes configuration
   kubectl apply -f k8s/deployment.yaml
   ```

5. **Configure DNS and ingress**

   Set up your domain name to point to your Kubernetes cluster's ingress controller.

### Option 3: CI/CD Deployment with GitHub Actions

For automated deployments:

1. **Set up GitHub repository secrets**

   Go to your GitHub repository → Settings → Secrets and add:

   - `DOCKERHUB_USERNAME`: Your Docker Hub username
   - `DOCKERHUB_TOKEN`: Your Docker Hub access token
   - `SSH_PRIVATE_KEY`: Your deployment server's SSH private key
   - `SSH_HOST`: Your deployment server's hostname or IP
   - `SSH_USER`: SSH username
   - `KNOWN_HOSTS`: The target server's SSH known hosts entry
   - `SECRET_KEY`: Your application secret key

2. **Push to main branch**

   The CI/CD pipeline in `.github/workflows/ci-cd.yml` will:
   - Run tests
   - Build and push the Docker image
   - Deploy to your server

   ```bash
   git push origin main
   ```

## Monitoring and Maintenance

### Monitoring with Prometheus and Grafana

The application includes built-in monitoring:

1. Access Prometheus dashboard at: http://your-server:9090
2. Access Grafana dashboard at: http://your-server:3000 (default credentials: admin/admin)

### Database Migrations

When changing the database schema:

```bash
# Generate a new migration
alembic revision --autogenerate -m "Description of changes"

# Apply the migration
alembic upgrade head
```

### Backup and Restore

Regularly backup your PostgreSQL database:

```bash
# Backup
pg_dump -h localhost -U postgres -d storage_space > backup.sql

# Restore
psql -h localhost -U postgres -d storage_space < backup.sql
```

## Security Considerations

1. **Environment Variables**: Never commit sensitive information like API keys or database credentials. Use environment variables or secrets management.

2. **API Security**: The API uses JWT authentication. Tokens expire after a set period.

3. **Database Security**: Use strong passwords and consider enabling SSL for database connections.

4. **Container Security**: Keep Docker images updated and avoid running containers as root.

5. **HTTPS**: Always use HTTPS in production with valid SSL certificates.

## Troubleshooting

### Common Issues

1. **Database Connection Failures**
   - Check if PostgreSQL is running
   - Verify connection string in environment variables
   - Ensure network connectivity between application and database

2. **Authentication Issues**
   - Check if SECRET_KEY is properly set
   - Verify token expiration settings

3. **Deployment Failures**
   - Check Docker logs: `docker-compose logs`
   - For Kubernetes: `kubectl logs deployment/storage-space-api`

## License

This project is licensed under the MIT License - see the LICENSE file for details.
