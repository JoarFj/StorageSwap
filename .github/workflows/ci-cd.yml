name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'test_secret_key' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .
        
    - name: Run Alembic migrations
      run: |
        alembic upgrade head
        
    - name: Run tests
      run: |
        pytest
  
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        no-cache: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/storage-space:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add known hosts
      run: echo "${{ secrets.KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
    - name: Deploy to server
      env:
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      run: |
        ssh $SSH_USER@$SSH_HOST << 'EOF'
          # Pull the latest image
          docker pull $DOCKERHUB_USERNAME/storage-space:latest
          
          # Stop any running container
          docker stop storage-space || true
          docker rm storage-space || true
          
          # Start new container
          docker run -d \
            --name storage-space \
            -p 5000:5000 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e ENVIRONMENT=production \
            $DOCKERHUB_USERNAME/storage-space:latest
        EOF
